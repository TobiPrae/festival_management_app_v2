

from google.cloud import datastore
import streamlit as st

def read_from_datastore(kind):
    """
    Reads all entities of a given kind from Google Cloud Datastore and returns them as a list of dictionaries,
    each including its Datastore ID under the key 'id'.

    Args:
        kind (str): The Datastore kind to query.

    Returns:
        data(list): List of entity dictionaries, each with an 'id' field added.
    """
    service_account_info = dict(st.secrets["service_account_key"])
    client = datastore.Client.from_service_account_info(service_account_info)

    query = client.query(kind=kind)
    results = list(query.fetch())

    data = []
    for entity in results:
        record = dict(entity)
        record["ID"] = entity.key.id_or_name  # Add the entity ID (autogenerated or named)
        data.append(record)

    return data

def delete_from_datastore(kind, id_):
    """
    Delete a Datastore entity by kind and ID.

    Args:
        kind (str): The Datastore kind.
        id_ (int or str): The ID of the entity to delete.
    """
    # Initialize Datastore client
    service_account_info = dict(st.secrets["service_account_key"])
    client = datastore.Client.from_service_account_info(service_account_info)

    # Create a key for the entity to delete
    key = client.key(kind, id_)

    # Delete the entity from Datastore
    client.delete(key)



def update_to_datastore(kind, entity_id, updated_fields):
    """
    Loads an existing entity by ID from Datastore, updates specific fields, and writes it back.

    Args:
        kind (str): The Datastore kind.
        entity_id (int or str): The ID of the entity to update.
        updated_fields (dict): Fields to update.
    """
    # Initialize Datastore client
    service_account_info = dict(st.secrets["service_account_key"])
    client = datastore.Client.from_service_account_info(service_account_info)

    # Create the key for the existing entity
    key = client.key(kind, entity_id)

    # Retrieve the entity
    entity = client.get(key)

    if entity is None:
        raise ValueError(f"Entity with ID {entity_id} not found in kind '{kind}'.")

    # Update fields
    for field, value in updated_fields.items():
        entity[field] = value

    # Save updated entity back to Datastore
    client.put(entity)


def add_to_datastore(kind, data):
    """
    Adds a new entity to a Datastore kind.

    Args:
        kind (str): The Datastore kind to add to.
        data (dict): The data to insert as fields.
    """
    # Initialize Datastore client
    service_account_info = dict(st.secrets["service_account_key"])
    client = datastore.Client.from_service_account_info(service_account_info)

    # Create an incomplete key (ID will be auto-generated)
    key = client.key(kind)

    # Create a new entity with that key
    entity = datastore.Entity(key=key)

    # Set the entity's fields
    entity.update(data)

    # Store it in Datastore
    client.put(entity)